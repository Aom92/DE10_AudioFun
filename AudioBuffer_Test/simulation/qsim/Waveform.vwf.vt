// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/31/2022 12:22:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          AudioBufferWout
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AudioBufferWout_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADCCLK;
reg DE10CLK;
reg DE10Reset;
reg [15:0] treg_DRAM_DQ;
// wires                                               
wire DAC_OUT;
wire [7:0] display0;
wire [7:0] display1;
wire [7:0] display2;
wire [7:0] display3;
wire [12:0] DRAM_ADDR;
wire [1:0] DRAM_BA;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire [1:0] DRAM_DQM;
wire DRAM_RAS_N;
wire DRAM_WE_N;
wire [15:0] led_out;

// assign statements (if any)                          
assign DRAM_DQ = treg_DRAM_DQ;
AudioBufferWout i1 (
// port map - connection between master ports and signals/registers   
	.ADCCLK(ADCCLK),
	.DAC_OUT(DAC_OUT),
	.DE10CLK(DE10CLK),
	.DE10Reset(DE10Reset),
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_DQM(DRAM_DQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_WE_N(DRAM_WE_N),
	.led_out(led_out)
);
initial 
begin 
#1000000 $finish;
end 

// ADCCLK
always
begin
	ADCCLK = 1'b0;
	ADCCLK = #50000 1'b1;
	#50000;
end 

// DE10CLK
always
begin
	DE10CLK = 1'b0;
	DE10CLK = #10000 1'b1;
	#10000;
end 

// DE10Reset
initial
begin
	DE10Reset = 1'b1;
end 
// DRAM_DQ[ 15 ]
initial
begin
	treg_DRAM_DQ[15] = 1'bZ;
end 
// DRAM_DQ[ 14 ]
initial
begin
	treg_DRAM_DQ[14] = 1'bZ;
end 
// DRAM_DQ[ 13 ]
initial
begin
	treg_DRAM_DQ[13] = 1'bZ;
end 
// DRAM_DQ[ 12 ]
initial
begin
	treg_DRAM_DQ[12] = 1'bZ;
end 
// DRAM_DQ[ 11 ]
initial
begin
	treg_DRAM_DQ[11] = 1'bZ;
end 
// DRAM_DQ[ 10 ]
initial
begin
	treg_DRAM_DQ[10] = 1'bZ;
end 
// DRAM_DQ[ 9 ]
initial
begin
	treg_DRAM_DQ[9] = 1'bZ;
end 
// DRAM_DQ[ 8 ]
initial
begin
	treg_DRAM_DQ[8] = 1'bZ;
end 
// DRAM_DQ[ 7 ]
initial
begin
	treg_DRAM_DQ[7] = 1'bZ;
end 
// DRAM_DQ[ 6 ]
initial
begin
	treg_DRAM_DQ[6] = 1'bZ;
end 
// DRAM_DQ[ 5 ]
initial
begin
	treg_DRAM_DQ[5] = 1'bZ;
end 
// DRAM_DQ[ 4 ]
initial
begin
	treg_DRAM_DQ[4] = 1'bZ;
end 
// DRAM_DQ[ 3 ]
initial
begin
	treg_DRAM_DQ[3] = 1'bZ;
end 
// DRAM_DQ[ 2 ]
initial
begin
	treg_DRAM_DQ[2] = 1'bZ;
end 
// DRAM_DQ[ 1 ]
initial
begin
	treg_DRAM_DQ[1] = 1'bZ;
end 
// DRAM_DQ[ 0 ]
initial
begin
	treg_DRAM_DQ[0] = 1'bZ;
end 
endmodule

