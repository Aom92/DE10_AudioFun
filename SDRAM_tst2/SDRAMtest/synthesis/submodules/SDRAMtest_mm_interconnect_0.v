// SDRAMtest_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module SDRAMtest_mm_interconnect_0 (
		input  wire        sys_sdram_pll_0_sys_clk_clk,                   //                 sys_sdram_pll_0_sys_clk.clk
		input  wire        Avalon_MM_0_reset_reset_bridge_in_reset_reset, // Avalon_MM_0_reset_reset_bridge_in_reset.reset
		input  wire [25:0] Avalon_MM_0_avm_m0_address,                    //                      Avalon_MM_0_avm_m0.address
		output wire        Avalon_MM_0_avm_m0_waitrequest,                //                                        .waitrequest
		input  wire        Avalon_MM_0_avm_m0_read,                       //                                        .read
		output wire [15:0] Avalon_MM_0_avm_m0_readdata,                   //                                        .readdata
		input  wire        Avalon_MM_0_avm_m0_write,                      //                                        .write
		input  wire [15:0] Avalon_MM_0_avm_m0_writedata,                  //                                        .writedata
		output wire [24:0] new_sdram_controller_0_s1_address,             //               new_sdram_controller_0_s1.address
		output wire        new_sdram_controller_0_s1_write,               //                                        .write
		output wire        new_sdram_controller_0_s1_read,                //                                        .read
		input  wire [15:0] new_sdram_controller_0_s1_readdata,            //                                        .readdata
		output wire [15:0] new_sdram_controller_0_s1_writedata,           //                                        .writedata
		output wire [1:0]  new_sdram_controller_0_s1_byteenable,          //                                        .byteenable
		input  wire        new_sdram_controller_0_s1_readdatavalid,       //                                        .readdatavalid
		input  wire        new_sdram_controller_0_s1_waitrequest,         //                                        .waitrequest
		output wire        new_sdram_controller_0_s1_chipselect           //                                        .chipselect
	);

	wire         avalon_mm_0_avm_m0_translator_avalon_universal_master_0_waitrequest;   // new_sdram_controller_0_s1_translator:uav_waitrequest -> Avalon_MM_0_avm_m0_translator:uav_waitrequest
	wire  [15:0] avalon_mm_0_avm_m0_translator_avalon_universal_master_0_readdata;      // new_sdram_controller_0_s1_translator:uav_readdata -> Avalon_MM_0_avm_m0_translator:uav_readdata
	wire         avalon_mm_0_avm_m0_translator_avalon_universal_master_0_debugaccess;   // Avalon_MM_0_avm_m0_translator:uav_debugaccess -> new_sdram_controller_0_s1_translator:uav_debugaccess
	wire  [25:0] avalon_mm_0_avm_m0_translator_avalon_universal_master_0_address;       // Avalon_MM_0_avm_m0_translator:uav_address -> new_sdram_controller_0_s1_translator:uav_address
	wire         avalon_mm_0_avm_m0_translator_avalon_universal_master_0_read;          // Avalon_MM_0_avm_m0_translator:uav_read -> new_sdram_controller_0_s1_translator:uav_read
	wire   [1:0] avalon_mm_0_avm_m0_translator_avalon_universal_master_0_byteenable;    // Avalon_MM_0_avm_m0_translator:uav_byteenable -> new_sdram_controller_0_s1_translator:uav_byteenable
	wire         avalon_mm_0_avm_m0_translator_avalon_universal_master_0_readdatavalid; // new_sdram_controller_0_s1_translator:uav_readdatavalid -> Avalon_MM_0_avm_m0_translator:uav_readdatavalid
	wire         avalon_mm_0_avm_m0_translator_avalon_universal_master_0_lock;          // Avalon_MM_0_avm_m0_translator:uav_lock -> new_sdram_controller_0_s1_translator:uav_lock
	wire         avalon_mm_0_avm_m0_translator_avalon_universal_master_0_write;         // Avalon_MM_0_avm_m0_translator:uav_write -> new_sdram_controller_0_s1_translator:uav_write
	wire  [15:0] avalon_mm_0_avm_m0_translator_avalon_universal_master_0_writedata;     // Avalon_MM_0_avm_m0_translator:uav_writedata -> new_sdram_controller_0_s1_translator:uav_writedata
	wire   [1:0] avalon_mm_0_avm_m0_translator_avalon_universal_master_0_burstcount;    // Avalon_MM_0_avm_m0_translator:uav_burstcount -> new_sdram_controller_0_s1_translator:uav_burstcount

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) avalon_mm_0_avm_m0_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                           //                       clk.clk
		.reset                  (Avalon_MM_0_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Avalon_MM_0_avm_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Avalon_MM_0_avm_m0_waitrequest),                                        //                          .waitrequest
		.av_read                (Avalon_MM_0_avm_m0_read),                                               //                          .read
		.av_readdata            (Avalon_MM_0_avm_m0_readdata),                                           //                          .readdata
		.av_write               (Avalon_MM_0_avm_m0_write),                                              //                          .write
		.av_writedata           (Avalon_MM_0_avm_m0_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_byteenable          (2'b11),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) new_sdram_controller_0_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                           //                      clk.clk
		.reset                  (Avalon_MM_0_reset_reset_bridge_in_reset_reset),                         //                    reset.reset
		.uav_address            (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read               (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write              (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest        (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata           (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata          (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock               (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess        (avalon_mm_0_avm_m0_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address             (new_sdram_controller_0_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (new_sdram_controller_0_s1_write),                                       //                         .write
		.av_read                (new_sdram_controller_0_s1_read),                                        //                         .read
		.av_readdata            (new_sdram_controller_0_s1_readdata),                                    //                         .readdata
		.av_writedata           (new_sdram_controller_0_s1_writedata),                                   //                         .writedata
		.av_byteenable          (new_sdram_controller_0_s1_byteenable),                                  //                         .byteenable
		.av_readdatavalid       (new_sdram_controller_0_s1_readdatavalid),                               //                         .readdatavalid
		.av_waitrequest         (new_sdram_controller_0_s1_waitrequest),                                 //                         .waitrequest
		.av_chipselect          (new_sdram_controller_0_s1_chipselect),                                  //                         .chipselect
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

endmodule
