-- ADC_debug_modular_adc_0.vhd

-- This file was auto-generated from altera_modular_adc_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 20.1 720

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ADC_debug_modular_adc_0 is
	generic (
		is_this_first_or_second_adc : integer := 1
	);
	port (
		clock_clk               : in  std_logic                     := '0';             --          clock.clk
		reset_sink_reset_n      : in  std_logic                     := '0';             --     reset_sink.reset_n
		adc_pll_clock_clk       : in  std_logic                     := '0';             --  adc_pll_clock.clk
		adc_pll_locked_export   : in  std_logic                     := '0';             -- adc_pll_locked.export
		sequencer_csr_address   : in  std_logic                     := '0';             --  sequencer_csr.address
		sequencer_csr_read      : in  std_logic                     := '0';             --               .read
		sequencer_csr_write     : in  std_logic                     := '0';             --               .write
		sequencer_csr_writedata : in  std_logic_vector(31 downto 0) := (others => '0'); --               .writedata
		sequencer_csr_readdata  : out std_logic_vector(31 downto 0);                    --               .readdata
		response_valid          : out std_logic;                                        --       response.valid
		response_startofpacket  : out std_logic;                                        --               .startofpacket
		response_endofpacket    : out std_logic;                                        --               .endofpacket
		response_empty          : out std_logic_vector(0 downto 0);                     --               .empty
		response_channel        : out std_logic_vector(4 downto 0);                     --               .channel
		response_data           : out std_logic_vector(11 downto 0)                     --               .data
	);
end entity ADC_debug_modular_adc_0;

architecture rtl of ADC_debug_modular_adc_0 is
	component ADC_debug_modular_adc_0_control_internal is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			cmd_valid         : in  std_logic                     := 'X';             -- valid
			cmd_channel       : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			cmd_sop           : in  std_logic                     := 'X';             -- startofpacket
			cmd_eop           : in  std_logic                     := 'X';             -- endofpacket
			cmd_ready         : out std_logic;                                        -- ready
			rst_n             : in  std_logic                     := 'X';             -- reset_n
			rsp_valid         : out std_logic;                                        -- valid
			rsp_channel       : out std_logic_vector(4 downto 0);                     -- channel
			rsp_data          : out std_logic_vector(11 downto 0);                    -- data
			rsp_sop           : out std_logic;                                        -- startofpacket
			rsp_eop           : out std_logic;                                        -- endofpacket
			clk_in_pll_c0     : in  std_logic                     := 'X';             -- clk
			clk_in_pll_locked : in  std_logic                     := 'X'              -- export
		);
	end component ADC_debug_modular_adc_0_control_internal;

	component ADC_debug_modular_adc_0_adc_monitor_internal is
		generic (
			ADC_DATA_WIDTH        : integer := 12;
			ADC_CHANNEL_WIDTH     : integer := 5;
			CAPTURE_DATA_WIDTH    : integer := 8;
			CONTROL_DATA_WIDTH    : integer := 32;
			CONTROL_ADDRESS_WIDTH : integer := 5;
			COUNT_WIDTH           : integer := 12
		);
		port (
			clk_clk                : in std_logic                     := 'X';             -- clk
			reset_reset            : in std_logic                     := 'X';             -- reset
			adc_data_channel       : in std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			adc_data_data          : in std_logic_vector(11 downto 0) := (others => 'X'); -- data
			adc_data_endofpacket   : in std_logic                     := 'X';             -- endofpacket
			adc_data_startofpacket : in std_logic                     := 'X';             -- startofpacket
			adc_data_valid         : in std_logic                     := 'X'              -- valid
		);
	end component ADC_debug_modular_adc_0_adc_monitor_internal;

	component ADC_debug_modular_adc_0_sequencer_internal is
		port (
			clk         : in  std_logic                     := 'X';             -- clk
			rst_n       : in  std_logic                     := 'X';             -- reset_n
			cmd_ready   : in  std_logic                     := 'X';             -- ready
			cmd_valid   : out std_logic;                                        -- valid
			cmd_channel : out std_logic_vector(4 downto 0);                     -- channel
			cmd_sop     : out std_logic;                                        -- startofpacket
			cmd_eop     : out std_logic;                                        -- endofpacket
			addr        : in  std_logic                     := 'X';             -- address
			read        : in  std_logic                     := 'X';             -- read
			write       : in  std_logic                     := 'X';             -- write
			writedata   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			readdata    : out std_logic_vector(31 downto 0)                     -- readdata
		);
	end component ADC_debug_modular_adc_0_sequencer_internal;

	component altera_avalon_st_splitter is
		generic (
			NUMBER_OF_OUTPUTS : integer := 2;
			QUALIFY_VALID_OUT : integer := 1;
			USE_PACKETS       : integer := 0;
			DATA_WIDTH        : integer := 8;
			CHANNEL_WIDTH     : integer := 1;
			ERROR_WIDTH       : integer := 1;
			BITS_PER_SYMBOL   : integer := 8;
			EMPTY_WIDTH       : integer := 1
		);
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			in0_valid           : in  std_logic                     := 'X';             -- valid
			in0_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			in0_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			in0_empty           : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- empty
			in0_channel         : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			in0_data            : in  std_logic_vector(11 downto 0) := (others => 'X'); -- data
			out0_valid          : out std_logic;                                        -- valid
			out0_startofpacket  : out std_logic;                                        -- startofpacket
			out0_endofpacket    : out std_logic;                                        -- endofpacket
			out0_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out0_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out0_data           : out std_logic_vector(11 downto 0);                    -- data
			out1_valid          : out std_logic;                                        -- valid
			out1_startofpacket  : out std_logic;                                        -- startofpacket
			out1_endofpacket    : out std_logic;                                        -- endofpacket
			out1_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out1_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out1_data           : out std_logic_vector(11 downto 0);                    -- data
			in0_ready           : out std_logic;                                        -- ready
			in0_error           : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- error
			out0_ready          : in  std_logic                     := 'X';             -- ready
			out0_error          : out std_logic_vector(0 downto 0);                     -- error
			out1_ready          : in  std_logic                     := 'X';             -- ready
			out1_error          : out std_logic_vector(0 downto 0);                     -- error
			out2_ready          : in  std_logic                     := 'X';             -- ready
			out2_valid          : out std_logic;                                        -- valid
			out2_startofpacket  : out std_logic;                                        -- startofpacket
			out2_endofpacket    : out std_logic;                                        -- endofpacket
			out2_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out2_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out2_error          : out std_logic_vector(0 downto 0);                     -- error
			out2_data           : out std_logic_vector(11 downto 0);                    -- data
			out3_ready          : in  std_logic                     := 'X';             -- ready
			out3_valid          : out std_logic;                                        -- valid
			out3_startofpacket  : out std_logic;                                        -- startofpacket
			out3_endofpacket    : out std_logic;                                        -- endofpacket
			out3_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out3_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out3_error          : out std_logic_vector(0 downto 0);                     -- error
			out3_data           : out std_logic_vector(11 downto 0);                    -- data
			out4_ready          : in  std_logic                     := 'X';             -- ready
			out4_valid          : out std_logic;                                        -- valid
			out4_startofpacket  : out std_logic;                                        -- startofpacket
			out4_endofpacket    : out std_logic;                                        -- endofpacket
			out4_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out4_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out4_error          : out std_logic_vector(0 downto 0);                     -- error
			out4_data           : out std_logic_vector(11 downto 0);                    -- data
			out5_ready          : in  std_logic                     := 'X';             -- ready
			out5_valid          : out std_logic;                                        -- valid
			out5_startofpacket  : out std_logic;                                        -- startofpacket
			out5_endofpacket    : out std_logic;                                        -- endofpacket
			out5_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out5_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out5_error          : out std_logic_vector(0 downto 0);                     -- error
			out5_data           : out std_logic_vector(11 downto 0);                    -- data
			out6_ready          : in  std_logic                     := 'X';             -- ready
			out6_valid          : out std_logic;                                        -- valid
			out6_startofpacket  : out std_logic;                                        -- startofpacket
			out6_endofpacket    : out std_logic;                                        -- endofpacket
			out6_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out6_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out6_error          : out std_logic_vector(0 downto 0);                     -- error
			out6_data           : out std_logic_vector(11 downto 0);                    -- data
			out7_ready          : in  std_logic                     := 'X';             -- ready
			out7_valid          : out std_logic;                                        -- valid
			out7_startofpacket  : out std_logic;                                        -- startofpacket
			out7_endofpacket    : out std_logic;                                        -- endofpacket
			out7_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out7_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out7_error          : out std_logic_vector(0 downto 0);                     -- error
			out7_data           : out std_logic_vector(11 downto 0);                    -- data
			out8_ready          : in  std_logic                     := 'X';             -- ready
			out8_valid          : out std_logic;                                        -- valid
			out8_startofpacket  : out std_logic;                                        -- startofpacket
			out8_endofpacket    : out std_logic;                                        -- endofpacket
			out8_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out8_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out8_error          : out std_logic_vector(0 downto 0);                     -- error
			out8_data           : out std_logic_vector(11 downto 0);                    -- data
			out9_ready          : in  std_logic                     := 'X';             -- ready
			out9_valid          : out std_logic;                                        -- valid
			out9_startofpacket  : out std_logic;                                        -- startofpacket
			out9_endofpacket    : out std_logic;                                        -- endofpacket
			out9_empty          : out std_logic_vector(0 downto 0);                     -- empty
			out9_channel        : out std_logic_vector(4 downto 0);                     -- channel
			out9_error          : out std_logic_vector(0 downto 0);                     -- error
			out9_data           : out std_logic_vector(11 downto 0);                    -- data
			out10_ready         : in  std_logic                     := 'X';             -- ready
			out10_valid         : out std_logic;                                        -- valid
			out10_startofpacket : out std_logic;                                        -- startofpacket
			out10_endofpacket   : out std_logic;                                        -- endofpacket
			out10_empty         : out std_logic_vector(0 downto 0);                     -- empty
			out10_channel       : out std_logic_vector(4 downto 0);                     -- channel
			out10_error         : out std_logic_vector(0 downto 0);                     -- error
			out10_data          : out std_logic_vector(11 downto 0);                    -- data
			out11_ready         : in  std_logic                     := 'X';             -- ready
			out11_valid         : out std_logic;                                        -- valid
			out11_startofpacket : out std_logic;                                        -- startofpacket
			out11_endofpacket   : out std_logic;                                        -- endofpacket
			out11_empty         : out std_logic_vector(0 downto 0);                     -- empty
			out11_channel       : out std_logic_vector(4 downto 0);                     -- channel
			out11_error         : out std_logic_vector(0 downto 0);                     -- error
			out11_data          : out std_logic_vector(11 downto 0);                    -- data
			out12_ready         : in  std_logic                     := 'X';             -- ready
			out12_valid         : out std_logic;                                        -- valid
			out12_startofpacket : out std_logic;                                        -- startofpacket
			out12_endofpacket   : out std_logic;                                        -- endofpacket
			out12_empty         : out std_logic_vector(0 downto 0);                     -- empty
			out12_channel       : out std_logic_vector(4 downto 0);                     -- channel
			out12_error         : out std_logic_vector(0 downto 0);                     -- error
			out12_data          : out std_logic_vector(11 downto 0);                    -- data
			out13_ready         : in  std_logic                     := 'X';             -- ready
			out13_valid         : out std_logic;                                        -- valid
			out13_startofpacket : out std_logic;                                        -- startofpacket
			out13_endofpacket   : out std_logic;                                        -- endofpacket
			out13_empty         : out std_logic_vector(0 downto 0);                     -- empty
			out13_channel       : out std_logic_vector(4 downto 0);                     -- channel
			out13_error         : out std_logic_vector(0 downto 0);                     -- error
			out13_data          : out std_logic_vector(11 downto 0);                    -- data
			out14_ready         : in  std_logic                     := 'X';             -- ready
			out14_valid         : out std_logic;                                        -- valid
			out14_startofpacket : out std_logic;                                        -- startofpacket
			out14_endofpacket   : out std_logic;                                        -- endofpacket
			out14_empty         : out std_logic_vector(0 downto 0);                     -- empty
			out14_channel       : out std_logic_vector(4 downto 0);                     -- channel
			out14_error         : out std_logic_vector(0 downto 0);                     -- error
			out14_data          : out std_logic_vector(11 downto 0);                    -- data
			out15_ready         : in  std_logic                     := 'X';             -- ready
			out15_valid         : out std_logic;                                        -- valid
			out15_startofpacket : out std_logic;                                        -- startofpacket
			out15_endofpacket   : out std_logic;                                        -- endofpacket
			out15_empty         : out std_logic_vector(0 downto 0);                     -- empty
			out15_channel       : out std_logic_vector(4 downto 0);                     -- channel
			out15_error         : out std_logic_vector(0 downto 0);                     -- error
			out15_data          : out std_logic_vector(11 downto 0)                     -- data
		);
	end component altera_avalon_st_splitter;

	component ADC_debug_modular_adc_0_avalon_st_adapter is
		generic (
			inBitsPerSymbol : integer := 8;
			inUsePackets    : integer := 0;
			inDataWidth     : integer := 8;
			inChannelWidth  : integer := 3;
			inErrorWidth    : integer := 2;
			inUseEmptyPort  : integer := 0;
			inUseValid      : integer := 1;
			inUseReady      : integer := 1;
			inReadyLatency  : integer := 0;
			outDataWidth    : integer := 32;
			outChannelWidth : integer := 3;
			outErrorWidth   : integer := 2;
			outUseEmptyPort : integer := 0;
			outUseValid     : integer := 1;
			outUseReady     : integer := 1;
			outReadyLatency : integer := 0
		);
		port (
			in_clk_0_clk        : in  std_logic                     := 'X';             -- clk
			in_rst_0_reset      : in  std_logic                     := 'X';             -- reset
			in_0_data           : in  std_logic_vector(11 downto 0) := (others => 'X'); -- data
			in_0_valid          : in  std_logic                     := 'X';             -- valid
			in_0_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_0_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			in_0_channel        : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			out_0_data          : out std_logic_vector(11 downto 0);                    -- data
			out_0_valid         : out std_logic;                                        -- valid
			out_0_startofpacket : out std_logic;                                        -- startofpacket
			out_0_endofpacket   : out std_logic;                                        -- endofpacket
			out_0_empty         : out std_logic;                                        -- empty
			out_0_channel       : out std_logic_vector(4 downto 0)                      -- channel
		);
	end component ADC_debug_modular_adc_0_avalon_st_adapter;

	component ADC_debug_modular_adc_0_avalon_st_adapter_001 is
		generic (
			inBitsPerSymbol : integer := 8;
			inUsePackets    : integer := 0;
			inDataWidth     : integer := 8;
			inChannelWidth  : integer := 3;
			inErrorWidth    : integer := 2;
			inUseEmptyPort  : integer := 0;
			inUseValid      : integer := 1;
			inUseReady      : integer := 1;
			inReadyLatency  : integer := 0;
			outDataWidth    : integer := 32;
			outChannelWidth : integer := 3;
			outErrorWidth   : integer := 2;
			outUseEmptyPort : integer := 0;
			outUseValid     : integer := 1;
			outUseReady     : integer := 1;
			outReadyLatency : integer := 0
		);
		port (
			in_clk_0_clk        : in  std_logic                     := 'X';             -- clk
			in_rst_0_reset      : in  std_logic                     := 'X';             -- reset
			in_0_data           : in  std_logic_vector(11 downto 0) := (others => 'X'); -- data
			in_0_valid          : in  std_logic                     := 'X';             -- valid
			in_0_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_0_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			in_0_empty          : in  std_logic                     := 'X';             -- empty
			in_0_channel        : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			out_0_data          : out std_logic_vector(11 downto 0);                    -- data
			out_0_valid         : out std_logic;                                        -- valid
			out_0_startofpacket : out std_logic;                                        -- startofpacket
			out_0_endofpacket   : out std_logic;                                        -- endofpacket
			out_0_channel       : out std_logic_vector(4 downto 0)                      -- channel
		);
	end component ADC_debug_modular_adc_0_avalon_st_adapter_001;

	signal sequencer_internal_command_valid          : std_logic;                     -- sequencer_internal:cmd_valid -> control_internal:cmd_valid
	signal sequencer_internal_command_ready          : std_logic;                     -- control_internal:cmd_ready -> sequencer_internal:cmd_ready
	signal sequencer_internal_command_channel        : std_logic_vector(4 downto 0);  -- sequencer_internal:cmd_channel -> control_internal:cmd_channel
	signal sequencer_internal_command_startofpacket  : std_logic;                     -- sequencer_internal:cmd_sop -> control_internal:cmd_sop
	signal sequencer_internal_command_endofpacket    : std_logic;                     -- sequencer_internal:cmd_eop -> control_internal:cmd_eop
	signal control_internal_response_valid           : std_logic;                     -- control_internal:rsp_valid -> avalon_st_adapter:in_0_valid
	signal control_internal_response_data            : std_logic_vector(11 downto 0); -- control_internal:rsp_data -> avalon_st_adapter:in_0_data
	signal control_internal_response_channel         : std_logic_vector(4 downto 0);  -- control_internal:rsp_channel -> avalon_st_adapter:in_0_channel
	signal control_internal_response_startofpacket   : std_logic;                     -- control_internal:rsp_sop -> avalon_st_adapter:in_0_startofpacket
	signal control_internal_response_endofpacket     : std_logic;                     -- control_internal:rsp_eop -> avalon_st_adapter:in_0_endofpacket
	signal avalon_st_adapter_out_0_valid             : std_logic;                     -- avalon_st_adapter:out_0_valid -> st_splitter_internal:in0_valid
	signal avalon_st_adapter_out_0_data              : std_logic_vector(11 downto 0); -- avalon_st_adapter:out_0_data -> st_splitter_internal:in0_data
	signal avalon_st_adapter_out_0_channel           : std_logic_vector(4 downto 0);  -- avalon_st_adapter:out_0_channel -> st_splitter_internal:in0_channel
	signal avalon_st_adapter_out_0_startofpacket     : std_logic;                     -- avalon_st_adapter:out_0_startofpacket -> st_splitter_internal:in0_startofpacket
	signal avalon_st_adapter_out_0_endofpacket       : std_logic;                     -- avalon_st_adapter:out_0_endofpacket -> st_splitter_internal:in0_endofpacket
	signal avalon_st_adapter_out_0_empty             : std_logic;                     -- avalon_st_adapter:out_0_empty -> st_splitter_internal:in0_empty
	signal st_splitter_internal_out1_valid           : std_logic;                     -- st_splitter_internal:out1_valid -> avalon_st_adapter_001:in_0_valid
	signal st_splitter_internal_out1_data            : std_logic_vector(11 downto 0); -- st_splitter_internal:out1_data -> avalon_st_adapter_001:in_0_data
	signal st_splitter_internal_out1_channel         : std_logic_vector(4 downto 0);  -- st_splitter_internal:out1_channel -> avalon_st_adapter_001:in_0_channel
	signal st_splitter_internal_out1_startofpacket   : std_logic;                     -- st_splitter_internal:out1_startofpacket -> avalon_st_adapter_001:in_0_startofpacket
	signal st_splitter_internal_out1_endofpacket     : std_logic;                     -- st_splitter_internal:out1_endofpacket -> avalon_st_adapter_001:in_0_endofpacket
	signal st_splitter_internal_out1_empty           : std_logic_vector(0 downto 0);  -- st_splitter_internal:out1_empty -> avalon_st_adapter_001:in_0_empty
	signal avalon_st_adapter_001_out_0_valid         : std_logic;                     -- avalon_st_adapter_001:out_0_valid -> adc_monitor_internal:adc_data_valid
	signal avalon_st_adapter_001_out_0_data          : std_logic_vector(11 downto 0); -- avalon_st_adapter_001:out_0_data -> adc_monitor_internal:adc_data_data
	signal avalon_st_adapter_001_out_0_channel       : std_logic_vector(4 downto 0);  -- avalon_st_adapter_001:out_0_channel -> adc_monitor_internal:adc_data_channel
	signal avalon_st_adapter_001_out_0_startofpacket : std_logic;                     -- avalon_st_adapter_001:out_0_startofpacket -> adc_monitor_internal:adc_data_startofpacket
	signal avalon_st_adapter_001_out_0_endofpacket   : std_logic;                     -- avalon_st_adapter_001:out_0_endofpacket -> adc_monitor_internal:adc_data_endofpacket
	signal reset_sink_reset_n_ports_inv              : std_logic;                     -- reset_sink_reset_n:inv -> [adc_monitor_internal:reset_reset, avalon_st_adapter:in_rst_0_reset, avalon_st_adapter_001:in_rst_0_reset, st_splitter_internal:reset]

begin

	is_this_first_or_second_adc_check : if is_this_first_or_second_adc /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	control_internal : component ADC_debug_modular_adc_0_control_internal
		port map (
			clk               => clock_clk,                                --         clock.clk
			cmd_valid         => sequencer_internal_command_valid,         --       command.valid
			cmd_channel       => sequencer_internal_command_channel,       --              .channel
			cmd_sop           => sequencer_internal_command_startofpacket, --              .startofpacket
			cmd_eop           => sequencer_internal_command_endofpacket,   --              .endofpacket
			cmd_ready         => sequencer_internal_command_ready,         --              .ready
			rst_n             => reset_sink_reset_n,                       --    reset_sink.reset_n
			rsp_valid         => control_internal_response_valid,          --      response.valid
			rsp_channel       => control_internal_response_channel,        --              .channel
			rsp_data          => control_internal_response_data,           --              .data
			rsp_sop           => control_internal_response_startofpacket,  --              .startofpacket
			rsp_eop           => control_internal_response_endofpacket,    --              .endofpacket
			clk_in_pll_c0     => adc_pll_clock_clk,                        -- adc_pll_clock.clk
			clk_in_pll_locked => adc_pll_locked_export                     --   conduit_end.export
		);

	adc_monitor_internal : component ADC_debug_modular_adc_0_adc_monitor_internal
		generic map (
			ADC_DATA_WIDTH        => 12,
			ADC_CHANNEL_WIDTH     => 5,
			CAPTURE_DATA_WIDTH    => 8,
			CONTROL_DATA_WIDTH    => 32,
			CONTROL_ADDRESS_WIDTH => 5,
			COUNT_WIDTH           => 12
		)
		port map (
			clk_clk                => clock_clk,                                 --      clk.clk
			reset_reset            => reset_sink_reset_n_ports_inv,              --    reset.reset
			adc_data_channel       => avalon_st_adapter_001_out_0_channel,       -- adc_data.channel
			adc_data_data          => avalon_st_adapter_001_out_0_data,          --         .data
			adc_data_endofpacket   => avalon_st_adapter_001_out_0_endofpacket,   --         .endofpacket
			adc_data_startofpacket => avalon_st_adapter_001_out_0_startofpacket, --         .startofpacket
			adc_data_valid         => avalon_st_adapter_001_out_0_valid          --         .valid
		);

	sequencer_internal : component ADC_debug_modular_adc_0_sequencer_internal
		port map (
			clk         => clock_clk,                                --      clock.clk
			rst_n       => reset_sink_reset_n,                       -- reset_sink.reset_n
			cmd_ready   => sequencer_internal_command_ready,         --    command.ready
			cmd_valid   => sequencer_internal_command_valid,         --           .valid
			cmd_channel => sequencer_internal_command_channel,       --           .channel
			cmd_sop     => sequencer_internal_command_startofpacket, --           .startofpacket
			cmd_eop     => sequencer_internal_command_endofpacket,   --           .endofpacket
			addr        => sequencer_csr_address,                    --        csr.address
			read        => sequencer_csr_read,                       --           .read
			write       => sequencer_csr_write,                      --           .write
			writedata   => sequencer_csr_writedata,                  --           .writedata
			readdata    => sequencer_csr_readdata                    --           .readdata
		);

	st_splitter_internal : component altera_avalon_st_splitter
		generic map (
			NUMBER_OF_OUTPUTS => 2,
			QUALIFY_VALID_OUT => 0,
			USE_PACKETS       => 1,
			DATA_WIDTH        => 12,
			CHANNEL_WIDTH     => 5,
			ERROR_WIDTH       => 1,
			BITS_PER_SYMBOL   => 12,
			EMPTY_WIDTH       => 1
		)
		port map (
			clk                 => clock_clk,                               --   clk.clk
			reset               => reset_sink_reset_n_ports_inv,            -- reset.reset
			in0_valid           => avalon_st_adapter_out_0_valid,           --    in.valid
			in0_startofpacket   => avalon_st_adapter_out_0_startofpacket,   --      .startofpacket
			in0_endofpacket     => avalon_st_adapter_out_0_endofpacket,     --      .endofpacket
			in0_empty(0)        => avalon_st_adapter_out_0_empty,           --      .empty
			in0_channel         => avalon_st_adapter_out_0_channel,         --      .channel
			in0_data            => avalon_st_adapter_out_0_data,            --      .data
			out0_valid          => response_valid,                          --  out0.valid
			out0_startofpacket  => response_startofpacket,                  --      .startofpacket
			out0_endofpacket    => response_endofpacket,                    --      .endofpacket
			out0_empty          => response_empty,                          --      .empty
			out0_channel        => response_channel,                        --      .channel
			out0_data           => response_data,                           --      .data
			out1_valid          => st_splitter_internal_out1_valid,         --  out1.valid
			out1_startofpacket  => st_splitter_internal_out1_startofpacket, --      .startofpacket
			out1_endofpacket    => st_splitter_internal_out1_endofpacket,   --      .endofpacket
			out1_empty          => st_splitter_internal_out1_empty,         --      .empty
			out1_channel        => st_splitter_internal_out1_channel,       --      .channel
			out1_data           => st_splitter_internal_out1_data,          --      .data
			in0_ready           => open,                                    -- (terminated)
			in0_error           => "0",                                     -- (terminated)
			out0_ready          => '1',                                     -- (terminated)
			out0_error          => open,                                    -- (terminated)
			out1_ready          => '1',                                     -- (terminated)
			out1_error          => open,                                    -- (terminated)
			out2_ready          => '1',                                     -- (terminated)
			out2_valid          => open,                                    -- (terminated)
			out2_startofpacket  => open,                                    -- (terminated)
			out2_endofpacket    => open,                                    -- (terminated)
			out2_empty          => open,                                    -- (terminated)
			out2_channel        => open,                                    -- (terminated)
			out2_error          => open,                                    -- (terminated)
			out2_data           => open,                                    -- (terminated)
			out3_ready          => '1',                                     -- (terminated)
			out3_valid          => open,                                    -- (terminated)
			out3_startofpacket  => open,                                    -- (terminated)
			out3_endofpacket    => open,                                    -- (terminated)
			out3_empty          => open,                                    -- (terminated)
			out3_channel        => open,                                    -- (terminated)
			out3_error          => open,                                    -- (terminated)
			out3_data           => open,                                    -- (terminated)
			out4_ready          => '1',                                     -- (terminated)
			out4_valid          => open,                                    -- (terminated)
			out4_startofpacket  => open,                                    -- (terminated)
			out4_endofpacket    => open,                                    -- (terminated)
			out4_empty          => open,                                    -- (terminated)
			out4_channel        => open,                                    -- (terminated)
			out4_error          => open,                                    -- (terminated)
			out4_data           => open,                                    -- (terminated)
			out5_ready          => '1',                                     -- (terminated)
			out5_valid          => open,                                    -- (terminated)
			out5_startofpacket  => open,                                    -- (terminated)
			out5_endofpacket    => open,                                    -- (terminated)
			out5_empty          => open,                                    -- (terminated)
			out5_channel        => open,                                    -- (terminated)
			out5_error          => open,                                    -- (terminated)
			out5_data           => open,                                    -- (terminated)
			out6_ready          => '1',                                     -- (terminated)
			out6_valid          => open,                                    -- (terminated)
			out6_startofpacket  => open,                                    -- (terminated)
			out6_endofpacket    => open,                                    -- (terminated)
			out6_empty          => open,                                    -- (terminated)
			out6_channel        => open,                                    -- (terminated)
			out6_error          => open,                                    -- (terminated)
			out6_data           => open,                                    -- (terminated)
			out7_ready          => '1',                                     -- (terminated)
			out7_valid          => open,                                    -- (terminated)
			out7_startofpacket  => open,                                    -- (terminated)
			out7_endofpacket    => open,                                    -- (terminated)
			out7_empty          => open,                                    -- (terminated)
			out7_channel        => open,                                    -- (terminated)
			out7_error          => open,                                    -- (terminated)
			out7_data           => open,                                    -- (terminated)
			out8_ready          => '1',                                     -- (terminated)
			out8_valid          => open,                                    -- (terminated)
			out8_startofpacket  => open,                                    -- (terminated)
			out8_endofpacket    => open,                                    -- (terminated)
			out8_empty          => open,                                    -- (terminated)
			out8_channel        => open,                                    -- (terminated)
			out8_error          => open,                                    -- (terminated)
			out8_data           => open,                                    -- (terminated)
			out9_ready          => '1',                                     -- (terminated)
			out9_valid          => open,                                    -- (terminated)
			out9_startofpacket  => open,                                    -- (terminated)
			out9_endofpacket    => open,                                    -- (terminated)
			out9_empty          => open,                                    -- (terminated)
			out9_channel        => open,                                    -- (terminated)
			out9_error          => open,                                    -- (terminated)
			out9_data           => open,                                    -- (terminated)
			out10_ready         => '1',                                     -- (terminated)
			out10_valid         => open,                                    -- (terminated)
			out10_startofpacket => open,                                    -- (terminated)
			out10_endofpacket   => open,                                    -- (terminated)
			out10_empty         => open,                                    -- (terminated)
			out10_channel       => open,                                    -- (terminated)
			out10_error         => open,                                    -- (terminated)
			out10_data          => open,                                    -- (terminated)
			out11_ready         => '1',                                     -- (terminated)
			out11_valid         => open,                                    -- (terminated)
			out11_startofpacket => open,                                    -- (terminated)
			out11_endofpacket   => open,                                    -- (terminated)
			out11_empty         => open,                                    -- (terminated)
			out11_channel       => open,                                    -- (terminated)
			out11_error         => open,                                    -- (terminated)
			out11_data          => open,                                    -- (terminated)
			out12_ready         => '1',                                     -- (terminated)
			out12_valid         => open,                                    -- (terminated)
			out12_startofpacket => open,                                    -- (terminated)
			out12_endofpacket   => open,                                    -- (terminated)
			out12_empty         => open,                                    -- (terminated)
			out12_channel       => open,                                    -- (terminated)
			out12_error         => open,                                    -- (terminated)
			out12_data          => open,                                    -- (terminated)
			out13_ready         => '1',                                     -- (terminated)
			out13_valid         => open,                                    -- (terminated)
			out13_startofpacket => open,                                    -- (terminated)
			out13_endofpacket   => open,                                    -- (terminated)
			out13_empty         => open,                                    -- (terminated)
			out13_channel       => open,                                    -- (terminated)
			out13_error         => open,                                    -- (terminated)
			out13_data          => open,                                    -- (terminated)
			out14_ready         => '1',                                     -- (terminated)
			out14_valid         => open,                                    -- (terminated)
			out14_startofpacket => open,                                    -- (terminated)
			out14_endofpacket   => open,                                    -- (terminated)
			out14_empty         => open,                                    -- (terminated)
			out14_channel       => open,                                    -- (terminated)
			out14_error         => open,                                    -- (terminated)
			out14_data          => open,                                    -- (terminated)
			out15_ready         => '1',                                     -- (terminated)
			out15_valid         => open,                                    -- (terminated)
			out15_startofpacket => open,                                    -- (terminated)
			out15_endofpacket   => open,                                    -- (terminated)
			out15_empty         => open,                                    -- (terminated)
			out15_channel       => open,                                    -- (terminated)
			out15_error         => open,                                    -- (terminated)
			out15_data          => open                                     -- (terminated)
		);

	avalon_st_adapter : component ADC_debug_modular_adc_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 12,
			inUsePackets    => 1,
			inDataWidth     => 12,
			inChannelWidth  => 5,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 0,
			inReadyLatency  => 0,
			outDataWidth    => 12,
			outChannelWidth => 5,
			outErrorWidth   => 0,
			outUseEmptyPort => 1,
			outUseValid     => 1,
			outUseReady     => 0,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk        => clock_clk,                               -- in_clk_0.clk
			in_rst_0_reset      => reset_sink_reset_n_ports_inv,            -- in_rst_0.reset
			in_0_data           => control_internal_response_data,          --     in_0.data
			in_0_valid          => control_internal_response_valid,         --         .valid
			in_0_startofpacket  => control_internal_response_startofpacket, --         .startofpacket
			in_0_endofpacket    => control_internal_response_endofpacket,   --         .endofpacket
			in_0_channel        => control_internal_response_channel,       --         .channel
			out_0_data          => avalon_st_adapter_out_0_data,            --    out_0.data
			out_0_valid         => avalon_st_adapter_out_0_valid,           --         .valid
			out_0_startofpacket => avalon_st_adapter_out_0_startofpacket,   --         .startofpacket
			out_0_endofpacket   => avalon_st_adapter_out_0_endofpacket,     --         .endofpacket
			out_0_empty         => avalon_st_adapter_out_0_empty,           --         .empty
			out_0_channel       => avalon_st_adapter_out_0_channel          --         .channel
		);

	avalon_st_adapter_001 : component ADC_debug_modular_adc_0_avalon_st_adapter_001
		generic map (
			inBitsPerSymbol => 12,
			inUsePackets    => 1,
			inDataWidth     => 12,
			inChannelWidth  => 5,
			inErrorWidth    => 0,
			inUseEmptyPort  => 1,
			inUseValid      => 1,
			inUseReady      => 0,
			inReadyLatency  => 0,
			outDataWidth    => 12,
			outChannelWidth => 5,
			outErrorWidth   => 0,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 0,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk        => clock_clk,                                 -- in_clk_0.clk
			in_rst_0_reset      => reset_sink_reset_n_ports_inv,              -- in_rst_0.reset
			in_0_data           => st_splitter_internal_out1_data,            --     in_0.data
			in_0_valid          => st_splitter_internal_out1_valid,           --         .valid
			in_0_startofpacket  => st_splitter_internal_out1_startofpacket,   --         .startofpacket
			in_0_endofpacket    => st_splitter_internal_out1_endofpacket,     --         .endofpacket
			in_0_empty          => st_splitter_internal_out1_empty(0),        --         .empty
			in_0_channel        => st_splitter_internal_out1_channel,         --         .channel
			out_0_data          => avalon_st_adapter_001_out_0_data,          --    out_0.data
			out_0_valid         => avalon_st_adapter_001_out_0_valid,         --         .valid
			out_0_startofpacket => avalon_st_adapter_001_out_0_startofpacket, --         .startofpacket
			out_0_endofpacket   => avalon_st_adapter_001_out_0_endofpacket,   --         .endofpacket
			out_0_channel       => avalon_st_adapter_001_out_0_channel        --         .channel
		);

	reset_sink_reset_n_ports_inv <= not reset_sink_reset_n;

end architecture rtl; -- of ADC_debug_modular_adc_0
