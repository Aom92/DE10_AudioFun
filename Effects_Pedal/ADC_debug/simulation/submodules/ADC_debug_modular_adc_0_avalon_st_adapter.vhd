-- ADC_debug_modular_adc_0_avalon_st_adapter.vhd

-- This file was auto-generated from altera_avalon_st_adapter_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 20.1 720

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ADC_debug_modular_adc_0_avalon_st_adapter is
	generic (
		inBitsPerSymbol : integer := 12;
		inUsePackets    : integer := 1;
		inDataWidth     : integer := 12;
		inChannelWidth  : integer := 5;
		inErrorWidth    : integer := 0;
		inUseEmptyPort  : integer := 0;
		inUseValid      : integer := 1;
		inUseReady      : integer := 0;
		inReadyLatency  : integer := 0;
		outDataWidth    : integer := 12;
		outChannelWidth : integer := 5;
		outErrorWidth   : integer := 0;
		outUseEmptyPort : integer := 1;
		outUseValid     : integer := 1;
		outUseReady     : integer := 0;
		outReadyLatency : integer := 0
	);
	port (
		in_clk_0_clk        : in  std_logic                     := '0';             -- in_clk_0.clk
		in_rst_0_reset      : in  std_logic                     := '0';             -- in_rst_0.reset
		in_0_data           : in  std_logic_vector(11 downto 0) := (others => '0'); --     in_0.data
		in_0_valid          : in  std_logic                     := '0';             --         .valid
		in_0_startofpacket  : in  std_logic                     := '0';             --         .startofpacket
		in_0_endofpacket    : in  std_logic                     := '0';             --         .endofpacket
		in_0_channel        : in  std_logic_vector(4 downto 0)  := (others => '0'); --         .channel
		out_0_data          : out std_logic_vector(11 downto 0);                    --    out_0.data
		out_0_valid         : out std_logic;                                        --         .valid
		out_0_startofpacket : out std_logic;                                        --         .startofpacket
		out_0_endofpacket   : out std_logic;                                        --         .endofpacket
		out_0_empty         : out std_logic;                                        --         .empty
		out_0_channel       : out std_logic_vector(4 downto 0)                      --         .channel
	);
end entity ADC_debug_modular_adc_0_avalon_st_adapter;

architecture rtl of ADC_debug_modular_adc_0_avalon_st_adapter is
	component ADC_debug_modular_adc_0_avalon_st_adapter_data_format_adapter_0 is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset_n           : in  std_logic                     := 'X';             -- reset_n
			in_data           : in  std_logic_vector(11 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			in_channel        : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			out_data          : out std_logic_vector(11 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic;                                        -- endofpacket
			out_empty         : out std_logic;                                        -- empty
			out_channel       : out std_logic_vector(4 downto 0)                      -- channel
		);
	end component ADC_debug_modular_adc_0_avalon_st_adapter_data_format_adapter_0;

	component ADC_debug_modular_adc_0_avalon_st_adapter_timing_adapter_0 is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset_n           : in  std_logic                     := 'X';             -- reset_n
			in_data           : in  std_logic_vector(11 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			in_channel        : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			out_data          : out std_logic_vector(11 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic;                                        -- endofpacket
			out_channel       : out std_logic_vector(4 downto 0)                      -- channel
		);
	end component ADC_debug_modular_adc_0_avalon_st_adapter_timing_adapter_0;

	component ADC_debug_modular_adc_0_avalon_st_adapter_timing_adapter_1 is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset_n           : in  std_logic                     := 'X';             -- reset_n
			in_data           : in  std_logic_vector(11 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			in_empty          : in  std_logic                     := 'X';             -- empty
			in_channel        : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			out_data          : out std_logic_vector(11 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic;                                        -- endofpacket
			out_empty         : out std_logic;                                        -- empty
			out_channel       : out std_logic_vector(4 downto 0)                      -- channel
		);
	end component ADC_debug_modular_adc_0_avalon_st_adapter_timing_adapter_1;

	signal timing_adapter_0_out_valid              : std_logic;                     -- timing_adapter_0:out_valid -> data_format_adapter_0:in_valid
	signal timing_adapter_0_out_data               : std_logic_vector(11 downto 0); -- timing_adapter_0:out_data -> data_format_adapter_0:in_data
	signal timing_adapter_0_out_ready              : std_logic;                     -- data_format_adapter_0:in_ready -> timing_adapter_0:out_ready
	signal timing_adapter_0_out_channel            : std_logic_vector(4 downto 0);  -- timing_adapter_0:out_channel -> data_format_adapter_0:in_channel
	signal timing_adapter_0_out_startofpacket      : std_logic;                     -- timing_adapter_0:out_startofpacket -> data_format_adapter_0:in_startofpacket
	signal timing_adapter_0_out_endofpacket        : std_logic;                     -- timing_adapter_0:out_endofpacket -> data_format_adapter_0:in_endofpacket
	signal data_format_adapter_0_out_valid         : std_logic;                     -- data_format_adapter_0:out_valid -> timing_adapter_1:in_valid
	signal data_format_adapter_0_out_data          : std_logic_vector(11 downto 0); -- data_format_adapter_0:out_data -> timing_adapter_1:in_data
	signal data_format_adapter_0_out_ready         : std_logic;                     -- timing_adapter_1:in_ready -> data_format_adapter_0:out_ready
	signal data_format_adapter_0_out_channel       : std_logic_vector(4 downto 0);  -- data_format_adapter_0:out_channel -> timing_adapter_1:in_channel
	signal data_format_adapter_0_out_startofpacket : std_logic;                     -- data_format_adapter_0:out_startofpacket -> timing_adapter_1:in_startofpacket
	signal data_format_adapter_0_out_endofpacket   : std_logic;                     -- data_format_adapter_0:out_endofpacket -> timing_adapter_1:in_endofpacket
	signal data_format_adapter_0_out_empty         : std_logic;                     -- data_format_adapter_0:out_empty -> timing_adapter_1:in_empty
	signal in_rst_0_reset_ports_inv                : std_logic;                     -- in_rst_0_reset:inv -> [data_format_adapter_0:reset_n, timing_adapter_0:reset_n, timing_adapter_1:reset_n]

begin

	inbitspersymbol_check : if inBitsPerSymbol /= 12 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inusepackets_check : if inUsePackets /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	indatawidth_check : if inDataWidth /= 12 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inchannelwidth_check : if inChannelWidth /= 5 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inerrorwidth_check : if inErrorWidth /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inuseemptyport_check : if inUseEmptyPort /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inusevalid_check : if inUseValid /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inuseready_check : if inUseReady /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inreadylatency_check : if inReadyLatency /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outdatawidth_check : if outDataWidth /= 12 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outchannelwidth_check : if outChannelWidth /= 5 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outerrorwidth_check : if outErrorWidth /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outuseemptyport_check : if outUseEmptyPort /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outusevalid_check : if outUseValid /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outuseready_check : if outUseReady /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outreadylatency_check : if outReadyLatency /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	data_format_adapter_0 : component ADC_debug_modular_adc_0_avalon_st_adapter_data_format_adapter_0
		port map (
			clk               => in_clk_0_clk,                            --   clk.clk
			reset_n           => in_rst_0_reset_ports_inv,                -- reset.reset_n
			in_data           => timing_adapter_0_out_data,               --    in.data
			in_valid          => timing_adapter_0_out_valid,              --      .valid
			in_ready          => timing_adapter_0_out_ready,              --      .ready
			in_startofpacket  => timing_adapter_0_out_startofpacket,      --      .startofpacket
			in_endofpacket    => timing_adapter_0_out_endofpacket,        --      .endofpacket
			in_channel        => timing_adapter_0_out_channel,            --      .channel
			out_data          => data_format_adapter_0_out_data,          --   out.data
			out_valid         => data_format_adapter_0_out_valid,         --      .valid
			out_ready         => data_format_adapter_0_out_ready,         --      .ready
			out_startofpacket => data_format_adapter_0_out_startofpacket, --      .startofpacket
			out_endofpacket   => data_format_adapter_0_out_endofpacket,   --      .endofpacket
			out_empty         => data_format_adapter_0_out_empty,         --      .empty
			out_channel       => data_format_adapter_0_out_channel        --      .channel
		);

	timing_adapter_0 : component ADC_debug_modular_adc_0_avalon_st_adapter_timing_adapter_0
		port map (
			clk               => in_clk_0_clk,                       --   clk.clk
			reset_n           => in_rst_0_reset_ports_inv,           -- reset.reset_n
			in_data           => in_0_data,                          --    in.data
			in_valid          => in_0_valid,                         --      .valid
			in_startofpacket  => in_0_startofpacket,                 --      .startofpacket
			in_endofpacket    => in_0_endofpacket,                   --      .endofpacket
			in_channel        => in_0_channel,                       --      .channel
			out_data          => timing_adapter_0_out_data,          --   out.data
			out_valid         => timing_adapter_0_out_valid,         --      .valid
			out_ready         => timing_adapter_0_out_ready,         --      .ready
			out_startofpacket => timing_adapter_0_out_startofpacket, --      .startofpacket
			out_endofpacket   => timing_adapter_0_out_endofpacket,   --      .endofpacket
			out_channel       => timing_adapter_0_out_channel        --      .channel
		);

	timing_adapter_1 : component ADC_debug_modular_adc_0_avalon_st_adapter_timing_adapter_1
		port map (
			clk               => in_clk_0_clk,                            --   clk.clk
			reset_n           => in_rst_0_reset_ports_inv,                -- reset.reset_n
			in_data           => data_format_adapter_0_out_data,          --    in.data
			in_valid          => data_format_adapter_0_out_valid,         --      .valid
			in_ready          => data_format_adapter_0_out_ready,         --      .ready
			in_startofpacket  => data_format_adapter_0_out_startofpacket, --      .startofpacket
			in_endofpacket    => data_format_adapter_0_out_endofpacket,   --      .endofpacket
			in_empty          => data_format_adapter_0_out_empty,         --      .empty
			in_channel        => data_format_adapter_0_out_channel,       --      .channel
			out_data          => out_0_data,                              --   out.data
			out_valid         => out_0_valid,                             --      .valid
			out_startofpacket => out_0_startofpacket,                     --      .startofpacket
			out_endofpacket   => out_0_endofpacket,                       --      .endofpacket
			out_empty         => out_0_empty,                             --      .empty
			out_channel       => out_0_channel                            --      .channel
		);

	in_rst_0_reset_ports_inv <= not in_rst_0_reset;

end architecture rtl; -- of ADC_debug_modular_adc_0_avalon_st_adapter
