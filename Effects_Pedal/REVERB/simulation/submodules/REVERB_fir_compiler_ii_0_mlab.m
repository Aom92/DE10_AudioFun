%
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!
%
%---------------------------------------------------------------------------------------------------------
%This is a filter with fixed coefficients.
%This Model Only Support Single Channel Input Data.
%Please input:
%data vector: 		stimulation(1:n)

%    This Model Only Support FIR_WIDTH to 51 Bits

%FILTER PARAMETER
%Input Data Width: 12
%Interpolation Factor: 1
%Decimation Factor: 1
%FIR Width (Full Calculation Width Before Output Width Adjust) :32
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values

function  output = REVERB_fir_compiler_ii_0_mlab(stimulation, bank);
 coef_matrix_in= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,-3,-1,1,3,3,3,1,0,-1,-2,-2,-1,0,0,0,1,1,2,3,1,0,0,0,0,0,-1,-2,-2,-1,0,0,0,0,0,0,0,-1,-2,-2,-2,0,3,1,-13,-16,-5,0,3,3,1,-4,-11,-11,-10,-10,-9,-2,2,2,5,8,7,5,4,4,2,0,0,-1,-2,-3,-3,-5,-2,4,-1,-8,-2,6,10,9,10,8,4,3,0,-2,0,0,-2,0,5,10,13,13,11,9,8,3,0,0,-3,-8,-10,-5,-2,-3,-3,2,6,6,7,10,15,18,19,18,15,9,7,7,4,1,-1,-1,0,0,-2,-2,0,6,9,7,7,9,10,10,10,11,11,9,6,5,5,4,2,1,1,1,2,0,0,0,0,1,3,4,6,7,5,4,5,4,5,9,7,6,7,6,5,2,0,0,3,6,4,2,0,-1,0,0,0,-3,-3,-4,-8,-7,-4,0,3,3,2,0,-1,0,4,7,5,0,-3,-2,1,4,2,-6,-10,-6,-1,0,-3,-2,-1,-2,-8,-11,-8,-1,3,3,0,-4,-5,-6,-11,-14,-14,-9,-4,-6,-8,-3,2,3,0,0,2,1,-2,-2,-1,-1,-2,-4,-4,0,1,0,-2,-2,-1,-4,-6,-6,-4,0,1,-2,-3,-2,0,2,0,-4,-3,1,2,4,4,2,1,1,0,-1,-2,-3,-7,-5,-3,-8,-6,0,3,1,2,4,3,0,-4,-8,-11,-9,-3,0,4,9,9,6,3,6,11,8,2,0,0,0,-3,-3,-2,-4,-5,-1,-1,-5,-2,1,2,0,0,-2,-11,-18,-15,-6,7,15,13,5,-4,-11,-14,-13,-10,-8,-4,0,2,8,9,4,6,13,8,-21,-47,-45,-18,6,24,37,30,9,-19,-32,-23,-15,-18,-24,-19,-17,-12,13,37,31,14,6,0,-11,-17,-16,-6,4,0,-6,-6,-9,-8,1,11,3,-13,-20,-15,-15,-21,-21,-11,-9,-22,-33,-28,-15,-5,-18,-65,-101,-102,-73,-41,-30,-25,-19,-17,-27,-56,-87,-92,-82,-62,-18,-38,-116,-65,67,160,182,172,123,33,-26,-66,-65,-38,11,64,85,73,70,87,93,88,74,47,18,5,9,28,26,-13,-6,42,70,66,64,63,40,8,-11,-34,-55,-64,-40,-3,25,34,37,66,90,83,58,29,1,-27,-45,-44,-34,-22,-3,1,1,23,58,75,60,34,15,0,3,29,53,67,52,9,-35,-52,-34,-15,-12,-15,-6,2,7,13,10,7,15,26,19,18,45,58,41,16,4,8,20,44,57,48,34,16,-8,-14,-10,0,4,0,10,14,12,10,5,1,1,-2,-16,-30,-36,-26,-14,-7,-5,1,8,-8,-36,-37,-20,-20,-31,-27,-19,13,14,-11,0,15,9,-3,-6,-2,-12,-26,-26,-7,12,13,6,-10,-27,-29,-20,-28,-44,-43,-36,-25,-8,-6,-17,-22,-15,-17,-15,-12,-22,-20,-1,2,-9,-12,-1,7,3,-5,0,3,0,-10,-13,-4,3,3,5,11,1,-24,-32,-22,-8,0,-4,-3,3,1,-5,-8,-11,-6,4,3,-4,-8,-7,-8,-8,0,7,1,-9,-18,-24,-27,-25,-17,-15,-6,4,-2,-7,-2,-5,-12,-4,5,0,-8,-5,-7,-27,-37,-30,-8,18,7,-16,-30,-36,-27,-14,-5,-1,0,4,-5,-21,-24,-24,-17,-9,-11,-21,-25,-17,-14,-19,-11,-3,1,2,0,0,-4,-13,-14,3,13,9,9,10,10,13,7,4,6,8,8,9,17,18,13,11,9,-3,-10,-6,-10,-19,-22,-17,-2,7,6,0,-12,-21,-34,-42,-36,-24,-19,-30,-42,-32,-17,-8,3,7,0,-9,-14,-10,0,0,-12,-13,-15,-40,-54,-26,0,8,13,11,-10,-39,-41,-43,-44,-29,-26,-36,-44,-46,-48,-56,-52,-34,-14,-27,-60,-69,-45,-68,-101,-64,-29,1,27,48,64,27,-30,-79,-109,-85,-23,49,127,204,245,255,252,237,200,149,96,48,18,-5,-30,-41,-39,-28,-9,0,-2,-6,-3,5,19,26,26,22,11,5,-4,-13,-11,-12,-30,-50,-64,-68,-61,-40,-20,-10,-1,0,2,-3,-1,24,39,38,36,24,21,27,34,36,32,36,26,3,0,11,18,4,-3,-1,-12,-18,-16,-8,-7,0,4,-14,-11,3,8,26,31,17,5,12,27,30,24,8,-3,-1,11,28,18,-5,-3,-4,-5,29,43,29,19,19,23,20,20,23,26,15,13,42,58,43,23,16,11,15,16,16,10,-16,-17,13,26,17,1,-9,-16,-29,-25,-18,-18,-14,-10,-9,-2,4,13,23,11,0,3,-2,-10,-16,-21,-7,1,-8,-13,-12,-7,0,-4,-4,2,-3,-18,-28,-30,-14,9,0,-16,6,43,-9,-115,-7,117,124,65,18,6,-44,-79,-107,-74,-40,-19,0,2,18,47,52,44,2,10,52,31,-37,-106,-120,-104,-99,-83,-45,-32,-31,-42,-51,-28,-11,-18,-33,-62,-77,-58,-55,-77,-78,-65,-44,-55,-86,-68,-14,14,-2,-25,-16,3,18,50,80,61,19,10,21,27,8,11,24,19,0,-4,12,27,43,45,49,48,42,37,18,-9,-14,12,40,46,35,30,44,62,81,111,122,114,114,115,107,79,50,37,48,63,56,33,19,13,12,0,1,26,39,42,32,41,55,52,52,44,34,36,37,34,27,21,9,13,35,41,36,32,23,-1,-26,-20,-9,-8,-2,5,5,-11,-14,8,22,16,0,-22,-20,3,15,8,0,-3,-8,-13,-19,-22,-24,-28,-30,-20,-2,0,-20,-36,-40,-31,-20,-16,-5,-2,-13,-24,-38,-45,-42,-37,-25,-11,-11,-21,-25,-27,-29,-19,-3,-5,-22,-29,-16,-5,-7,-11,-21,-35,-36,-22,-2,4,6,1,-11,-25,-39,-41,-28,-25,-29,-30,-26,-13,-6,-10,-7,1,3,-13,-28,-36,-51,-50,-36,-13,11,13,5,10,9,5,5,2,4,12,19,18,13,4,-1,-2,4,9,-4,-19,-24,-24,-23,-12,1,6,7,0,-3,-14,-28,-29,-17,1,12,-3,-19,-16,-20,-31,-26,-12,-11,-12,-12,-22,-33,-17,9,11,2,9,46,67,-14,-104,-97,-24,88,135,103,63,3,-44,-99,-151,-118,-42,9,20,-8,0,30,32,28,25,13,-6,-8,10,17,10,2,0,-4,-12,-19,-45,-64,-57,-38,-9,13,12,-1,-29,-51,-62,-64,-59,-57,-85,-118,-134,-125,-97,-64,-29,-20,-32,-33,-19,-1,17,35,37,30,35,25,-3,14,75,102,80,52,69,84,46,14,8,19,28,34,69,90,42,-8,7,55,66,44,45,45,17,-15,-17,22,51,41,28,45,90,115,87,29,1,0,-5,-2,19,24,12,24,39,51,62,65,55,40,35,37,26,1,-14,-19,-16,-8,3,15,13,16,24,25,26,13,-5,-18,-13,8,24,33,27,5,-20,-18,9,29,39,25,9,3,0,5,0,-1,4,8,2,-10,-13,-6,-8,-15,-19,-27,-22,-5,5,9,2,-8,-16,-16,-10,-8,-11,-8,-4,0,-2,-4,-5,-9,-5,2,5,0,-14,-20,-22,-20,-13,-10,-15,-24,-33,-37,-25,-9,-11,-15,-12,-14,-19,-21,-22,-20,-20,-19,-20,-22,-23,-34,-44,-40,-17,2,0,-4,-1,0,1,2,3,2,1,7,3,-11,-27,-37,-29,-16,-25,-35,-33,-27,-22,-18,-16,-13,-9,-11,-15,-4,11,7,-6,-15,-14,-16,-17,-7,-3,-10,-22,-28,-18,-4,1,5,9,6,0,-2,0,-1,-5,-15,-20,-11,-3,-3,-10,-15,-8,5,14,13,18,25,16,7,14,21,14,3,-1,0,-2,-5,-1,-4,-12,-15,-11,-7,-4,-5,0,11,20,18,4,-8,-13,-16,-17,-20,-20,-9,-7,-10,-8,-8,-6,1,13,20,17,9,7,-1,-9,-5,6,15,17,10,-1,-14,-30,-36,-22,0,9,5,4,3,-3,-17,-19,-17,-28,-33,-37,-52,-72,-71,-26,32,53,42,31,27,11,-6,-7,0,8,22,31,31,28,24,19,0,-22,-2,30,22,-4,-17,-8,11,21,17,8,2,-5,-8,-8,-5,-2,0,5,10,10,10,7,-7,-8,7,23,28,20,13,14,16,14,8,3,3,2,-4,-5,6,17,16,17,27,31,21,7,-1,-7,-10,-5,3,6,6,10,14,14,14,20,22,20,18,18,14,9,7,8,5,2,2,1,-5,-16,-16,-6,2,5,1,-3,-4,-7,-3,3,5,6,0,-8,-9,-8,-10,-10,-7,-5,-1,0,-2,-8,-14,-13,-5,3,3,-2,-6,-11,-14,-11,-5,-7,-7,-4,-7,-13,-14,-10,-7,-6,-10,-18,-17,-12,-5,4,8,5,-4,-13,-19,-13,0,8,8,5,6,3,-4,-9,-5,-5,-16,-16,0,14,18,16,8,-8,-26,-33,-27,-16,-5,0,2,0,-4,-8,-8,-7,-6,-1,0,0,0,0,-5,-10,-9,-5,-6,-5,0,5,7,9,9,9,12,12,12,11,7,3,4,7,10,13,14,13,14,14,13,9,5,3,3,7,11,11,3,-2,5,15,16,9,5,4,3,-1,-3,0,9,13,12,12,12,13,10,9,13,15,15,13,5,-1,-3,-4,-2,2,4,1,-6,-8,-4,0,3,8,11,9,7,9,14,16,12,6,1,-1,-1,0,-1,0,2,5,6,5,5,3,2,5,7,6,2,0,-1,-2,-3,-4,-2,0,3,4,0,-3,-5,-4,-4,-5,-4,-4,-5,-5,-5,-5,-6,-4,0,2,2,0,-6,-9,-8,-6,-7,-8,-7,-5,-4,-2,-3,-6,-6,-3,-1,-2,-3,-2,-2,-2,-2,-2,-2,-3,-5,-6,-4,-2,-1,0,-1,-2,-1,-1,0,0,0,0,0,0,0,-1,-2,-1,0,-2,-3,-2,0,0,0,0,0,1,2,2,2,2,1,0,0,0,-1,-2,0,1,2,2,2,2,2,3,3,1,0,0,1,2,3,4,3,2,1,0,0,2,2,3,3,2,2,1,0,0,1,2,1,1,1,2,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,-1,-2,-1,0,0,0,0,-1,-3,-2,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
 INTER_FACTOR  = 1;
 DECI_FACTOR  =  1;
 MSB_RM  = 0;
 MSB_TYPE  = 0;
 LSB_RM  = 0;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 32 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 32 ;  %32
 DATA_WIDTH = 12;

  
 % check size of inputs. 
 DY = size(stimulation, 2);
 CY = size(coef_matrix_in, 2);
 if CY ~= DY * INTER_FACTOR
    fprintf('WARNING : coef_matrix size and input data size does not match\n');
 end 

 %fill coef_matrix to length of data with the latest coef set 
 if CY < DY * INTER_FACTOR
     coef_matrix = coef_matrix_in(bank + 1, :);
   end 
	  
 % check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
        %set max/min for signed 
        maxdat = 2^(DATA_WIDTH-1)-1; 
        mindat = -maxdat-1; 

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 

	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
else
    output = out_dec(1:DECI_FACTOR:len1);
end

function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index)

	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
    % output is the sum of input and coef multiplication
	%outindex is the next data_index 
    
    coef_length = length(coef_current);
	data_length = length(int_sti); 
	 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
        return
	end 
    min_index = max(data_index - data_length, 1);
    max_index = min(data_index, coef_length);
	 
	outindex= data_index+1; 
    output = int_sti(data_index + 1 - (min_index:max_index)) * coef_current(min_index:max_index).';
 
function output = bi_round(data_in,LSB_RM,ORI_WIDTH)
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width

	data = round (data_in / 2^LSB_RM);

	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	 
function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH)
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift((2^ORI_WIDTH*(data_in<0)) + (2^LSB_RM)*floor(data_in/(2^LSB_RM)), -LSB_RM) - (2^(ORI_WIDTH-LSB_RM)) *(data_in<0); 
	 
function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH)
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	 
function output = bi_satu(data_in,MSB_RM,ORI_WIDTH)
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
    data_in(data_in > maxdat) = maxdat;
    data_in(data_in < mindat) = mindat;
	output = data_in; 

